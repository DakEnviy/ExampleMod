// version: 4
/*
    DO NOT CHANGE THIS FILE!
    Also, you may replace this file at any time if there is an update available.
    Please check https://github.com/DakEnviy/ExampleMod for updates.
*/

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        // Use custom ForgeGradle to use latest version of Gradle
        classpath("com.anatawa12.forge:ForgeGradle:1.2-1.0.+") {
            changing = true
        }
    }
}

plugins {
    id "java"
    id "maven-publish"
}

apply plugin: "forge"

// These settings allow you to choose what version of Java you want to be compatible with,
// Forge 1.7.10 runs on Java 6 to 8
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
    // Ensures that the encoding of source files is set to UTF-8,
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    options.encoding = "UTF-8"
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    throw new GradleException("This project requires Java 8, but it's running on ${JavaVersion.current()}")
}

checkPropertyExists("modName")
checkPropertyExists("modGroup")
checkPropertyExists("modId")
checkPropertyExists("versionMajor")
checkPropertyExists("versionMinor")
checkPropertyExists("versionPatch")
checkPropertyExists("minecraftVersion")
checkPropertyExists("forgeVersion")
checkPropertyExists("username")
checkPropertyExists("jvmInitMemory")
checkPropertyExists("jvmMaxMemory")
checkPropertyExists("debugMixins")
checkPropertyExists("publishToGitlab")

def isDev = System.getenv("PRODUCTION") == null

version = "${versionMajor}.${versionMinor}.${versionPatch}"
group = modGroup
archivesBaseName = modId

if (isDev) {
    version += "-INDEV"
}

def javaSourceDir = "src/main/java"
def resourcesDir = "src/main/resources"

def javaPackage = "${javaSourceDir}/${modGroup.replaceAll("\\.", "/")}"

if (!getFile(javaPackage).exists()) {
    throw new GradleException("Could not resolve \"modGroup\"! Could not find ${javaPackage}")
}

def atFilename = "${modId}_at.cfg"
def atPath = "${resourcesDir}/META-INF/${atFilename}"
def mixinPackagePath = "${javaPackage}/asm/mixins"
def mixinConfigPath = "${resourcesDir}/mixins.${modId}.json"
def pluginPath = "${javaPackage}/${modName}Plugin.java"

def hasAt = getFile(atPath).exists()
def hasMixins = getFile(mixinPackagePath).exists()
def hasPlugin = getFile(pluginPath).exists() || hasMixins

if (hasMixins) {
    initMixinConfig(mixinConfigPath)
    initPluginForMixin(pluginPath, modGroup)

    // Apply third-party configuration for mixins
    apply from: "https://raw.githubusercontent.com/tox1cozZ/mixin-booter-legacy/master/gradle/configurations/v1.gradle"
}

repositories {
    flatDir {
        dirs "lib"
    }
}

apply from: "dependencies.gradle"

minecraft {
    version = "${minecraftVersion}-${forgeVersion}-${minecraftVersion}"
    runDir = "run"

    replace "@modId@", modId
    replace "@modName@", modName
    replace "@version@", project.version
    replace "@modGroup@", modGroup
    replace "@minecraftVersion@", minecraftVersion
    replace "@forgeVersion@", forgeVersion
}

// Collect JVM arguments
def jvmArguments = []

if (jvmInitMemory) {
    jvmArguments.add("-Xms${jvmInitMemory}")
}

if (jvmMaxMemory) {
    jvmArguments.add("-Xmx${jvmMaxMemory}")
}

if (hasMixins && debugMixins.toBoolean()) {
    jvmArguments += [
            "-Dmixin.debug.countInjections=true",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.debug.export=true"
    ]
}

runClient {
    jvmArgs jvmArguments

    if (username) {
        args "--username", username
    }
}

runServer {
    jvmArgs jvmArguments
}

// Collect manifest attributes
def manifestAttributes = [:]

if (hasAt) {
    manifestAttributes += ["FMLAT": atFilename]
}

if (hasPlugin || hasMixins) {
    manifestAttributes += [
            "FMLCorePlugin": "${modGroup}.${modName}Plugin",
            "FMLCorePluginContainsFMLMod": "true"
    ]
}

jar {
    manifest {
        attributes manifestAttributes
    }
}

// This task creates a .jar file containing a deobfuscated version of this mod,
// for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier "dev"
    from sourceSets.main.output

    manifest {
        attributes manifestAttributes
    }
}

// This task creates a .jar file containing the source code of this mod
task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives devJar
    archives sourcesJar
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("mcmod.info") {
        expand "modid": modId, "name": modName, "version": project.version, "mcversion": project.minecraft.version
    }

    if (hasMixins) {
        def mixinPackage = "${modGroup}.asm.mixins"
        def mixinRefmap = tasks.mixin.mixinRefMapName.get()

        inputs.property "mixin_package", mixinPackage
        inputs.property "mixin_refmap", mixinRefmap

        filesMatching("mixins.*.json") {
            expand "mixin_package": mixinPackage, "mixin_refmap": mixinRefmap
        }
    }
}

// Workaround variable hiding in pom processing
def projectConfigurations = project.configurations

publishing {
    def serverUrl = System.getenv("CI_SERVER_URL")
    def projectId = System.getenv("CI_PROJECT_ID")
    def jobToken = System.getenv("CI_JOB_TOKEN")

    if (publishToGitlab.toBoolean() && serverUrl != null && projectId != null && jobToken != null) {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact source: devJar, classifier: "dev"
                artifact source: sourcesJar, classifier: "sources"

                // remove extra garbage from minecraft and minecraftDeps configuration
                pom.withXml {
                    def badArtifacts = [:].withDefault { [] as Set<String> }

                    for (configuration in [projectConfigurations.minecraft, projectConfigurations.minecraftDeps]) {
                        for (dependency in configuration.allDependencies) {
                            if (dependency.group != null) {
                                badArtifacts[dependency.group] += dependency.name
                            }
                        }
                    }

                    // example for specifying extra stuff to ignore
                    // badArtifacts["org.example.group"] += "artifactName"

                    def pomNode = asNode()

                    pomNode.dependencies.'*'.findAll() {
                        badArtifacts[it.groupId.text()].contains(it.artifactId.text())
                    }.each() {
                        it.parent().remove(it)
                    }
                }
            }
        }

        repositories {
            maven {
                url "${serverUrl}/api/v4/projects/${projectId}/packages/maven"

                credentials(HttpHeaderCredentials) {
                    name = "Job-Token"
                    value = jobToken
                }

                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }
}

// Helpers

def checkPropertyExists(String propertyName) {
    if (!project.hasProperty(propertyName)) {
        throw new GradleException("This project requires a property \"${propertyName}\"! Please add it to your \"gradle.properties\"")
    }
}

def getFile(String relativePath) {
    return new File(projectDir, relativePath)
}

def initMixinConfig(String filepath) {
    def mixinConfigFile = getFile(filepath)

    if (!mixinConfigFile.exists()) {
        mixinConfigFile.text = """{
  "required": true,
  "minVersion": "0.8",
  "package": "\${mixin_package}",
  "refmap": "\${mixin_refmap}",
  "target": "@env(DEFAULT)",
  "compatibilityLevel": "JAVA_8",
  "injectors": {
    "defaultRequire": 1
  },
  "mixins": [],
  "client": [],
  "server": []
}"""
    }
}

def initPluginForMixin(String filepath, String modGroup) {
    def pluginFile = getFile(filepath)

    if (!pluginFile.exists()) {
        pluginFile.text = """package ${modGroup};

import cpw.mods.fml.relauncher.IFMLLoadingPlugin;
import io.github.tox1cozz.mixinbooterlegacy.IEarlyMixinLoader;

import java.util.Collections;
import java.util.List;
import java.util.Map;

@IFMLLoadingPlugin.Name("@modName@")
@IFMLLoadingPlugin.MCVersion("@minecraftVersion@")
public class EnderFuturePlugin implements IFMLLoadingPlugin, IEarlyMixinLoader {

    @Override
    public String[] getASMTransformerClass() {
        return new String[0];
    }

    @Override
    public String getModContainerClass() {
        return null;
    }

    @Override
    public String getSetupClass() {
        return null;
    }

    @Override
    public void injectData(Map<String, Object> data) {
    }

    @Override
    public String getAccessTransformerClass() {
        return null;
    }

    @Override
    public List<String> getMixinConfigs() {
        return Collections.singletonList("mixins.@modId@.json");
    }
}
"""
    }
}
